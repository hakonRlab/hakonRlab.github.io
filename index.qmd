---
title: "The Oslo model"
---

A lymph node invasion prediction model for prostate cancer patients

Sample size calculation was done using the pmsampsize package. None of the evaluated models have published the R^2^ so this was not included in our sample size calulation.

```{r, eval=FALSE}
library(pmsampsize)
out <- pmsampsize(type = "b", cstatistic  = 0.8, parameters = 20, prevalence = 0.25, shrinkage = 0.8)
out$results_table

```

Imputing missing values with rmsb package

```{r, eval=FALSE}
library(rmsb)

set.seed(1999)         

mi <- aregImpute(~ pN + PSAutredn + ISUP + PIRADS345  + mr_cT + MRindexTumorL1 + ProstVolum + dre_cT + BMI + PercPosCores, data=plndbayes_mrpNimp, n.impute=10, nk=4, pr=FALSE, boot.method = 'approximate bayesian')
```

Bayesian logistic regression model development followed many suggestions from the [Regression Modeling Strategies](https://hbiostat.org/rmsc/) by Frank Harrell. Used the rmsb package and the imputed data sets generated in the previous code chunk.

```{r, eval=FALSE}
OslomodelFull <- stackMI(formula = pN ~ rcs(PSA,4)*rcs(ProstateVolume,4) + ISUP  + dre_cT  + PIRADS345  + mr_cT + rcs(MRindexTumorL1,4)  + rcs(BMI,4) +
                              rcs(PercPosCores,4), fitter = blrm, xtrans = mi, data=plndbayes_mrpNimp, iter = 4000, warmup = 2000 , chain = 4, file='OslomodelFull.RDS')


plot(anova(OslomodelFull)) # Relative explained variation of variables

OslomodelFinal <- stackMI(formula = pN ~ rcs(PSA,4)*rcs(ProstateVolume,4) + ISUP + mr_cT + rcs(MRindexTumorL1,4), fitter = blrm, xtrans = mi, data=plndbayes_mrpNimp, iter = 4000, warmup = 2000 , chain = 4, file='OslomodellenFinal.RDS')

##### Expected log-predictive density eastimates

loo_full <- OslomodelFull$loo
loo_final <- OslomodelFinal$loo

print(loo_compare(loo_full, loo_final))


elpd_tab <- data.frame(
  est = c("elpd_loo", "p_loo", "looic"),
  all = c(loo_full$elpd_loo, loo_full$p_loo, loo_full$looic),
  all_se = c(loo_alle$se_elpd_loo, loo_alle$se_p_loo, loo_alle$se_looic)
)

names(elpd_tab) <- c("", "Estimates", "S.E")
```

projection predictive feature selection using the [projpred](https://mc-stan.org/projpred/index.html) package

```{r, eval=FALSE}
library(projpred)

oslo_ref <- get_refmodel(OslomodelFull)

cvvs_imp1 <- cv_varsel(oslo_ref,
                       validate_search = FALSE,
                       method = "forward",
                       ncluster_pred = 20,
                       nterms_max = 20,
                       verbose = FALSE)

plot(cvvs_imp1, stats = "mlpd", ranking_ntrems_max = NA)


cvvs_imp2 <- cv_varsel(oslo_ref,
                       cv_method = "kfold",
                       method ="forward",
                       k=10,
                       ncluster_pred = 20,
                       nterms_max = 9,
                       parallel = TRUE,
                       verbose = FALSE)

plot(cvvs_imp2, stats = "mlpd", deltas  = TRUE)

suggest_size(cvvs_imp2)
```

The [Evaluating a logistic regression based prediction tool in R](https://darrendahly.github.io/post/homr) by Darren Dahly was used with minor modifications of the distribution plot.

```{r, eval=FALSE}
       
    g2 <- ggplot(data, aes(x = pred_var, fill = alive)) +
      geom_histogram(aes(fill = alive), bins = 200) +
      geom_text(aes(x=.5, y=8,label="pN1", color = "red")) +
       geom_text(aes(x=.3, y=8,label="pN0", color = "blue")) +
      scale_x_continuous(limits = c(0, 1), breaks = seq(0, 1, by = 0.1)) +
      xlab("Predicted Probability") +
      ylab("count") +
      theme_minimal() +
      scale_y_continuous(breaks = c(0,10,20)) +
      theme(panel.grid.minor = element_blank(), legend.position = "none")
```

<iframe src="CalplotDist_figf.html" width="100%" height="300">

</iframe>

The resources at [Decission Curve Analyses](https://mskcc-epi-bio.github.io/decisioncurveanalysis/dca-tutorial.html) was used as a guideline for the net reduction plot.

```{r, eval=FALSE}
library(dcurves)
library(plotly)
library(ggplot2)

oslo <- dca(pN ~ predprob + bri2019 + bri2019recal + bri2019refit, data = data_pN_predprob,
    thresholds = seq(0, 0.4, 0.01),
    label = list(predprob = "Oslo model",
                 bri2019 = "Briganti 2019",
                 bri2019recal = "Briganti 2019 recalibrated",
                 bri2019refit = "Briganti 2019 refited")
    ) %>% 
  net_intervention_avoided() %>% 
  plot(smooth = TRUE, show_ggplot_code = TRUE)+
  ggplot2::coord_cartesian(ylim = c(-0.05, 0.4))+
  ggplot2::theme(text = element_text(size=16))
 
ggplotly(oslo)
```

<iframe src="Oslo_dca_figure.html" width="100%" height="400">

</iframe>

The scripts bellow are the ones used to calculate the predictied probalitities of the OUH cohort when evaluating the MSKCC, Briganti 2012 and Briganti 2019 models

[MSKCC nomogram](https://www.mskcc.org/nomograms/prostate/pre_op/coefficients)

```{r, eval=FALSE}
#last updated December 15 2023

knot1 <- 0.2 #PSAPreopKnot1
knot2 <- 4.8 #PSAPreopKnot2
knot3 <- 7.33 #PSAPreopKnot3
knot4 <- 307 #PSAPreopKnot3


#Calculating the PSAsp1var and PSAsp2var variables.

MSKCCcohort1$PSAsp1var <- ""
MSKCCcohort1$PSAsp1var <- as.numeric(MSKCCcohort1$PSAsp1var)
for (i in 1:nrow(MSKCCcohort1)){
  MSKCCcohort1[i, "PSAsp1var"] <- max(MSKCCcohort1[i, "PSAutredn"] - knot1,0)^3 - max(MSKCCcohort1[i,   "PSAutredn"] - knot3, 0)^3 * ((knot4 - knot1)/(knot4 - knot3))+ max(MSKCCcohort1[i, "PSAutredn"] - knot4, 0)^3 *((knot3 -knot1)/(knot4 - knot3))
}

MSKCCcohort1$PSAsp2var <- ""
MSKCCcohort1$PSAsp2var <- as.numeric(MSKCCcohort1$PSAsp2var)

for (i in 1:nrow(MSKCCcohort1)){MSKCCcohort1[i, "PSAsp2var"] <- max(MSKCCcohort1[i, "PSAutredn"] - knot2,0)^3 - max(MSKCCcohort1[i, "PSAutredn"] - knot3, 0)^3 * ((knot4 - knot2)/(knot4 - knot3))+
max(MSKCCcohort1[i, "PSAutredn"] - knot4, 0)^3 *((knot3 -knot2)/(knot4 - knot3))
}

#last updated December 15 2023

InterceptMSKCC <- -5.9587
Age <- 0.0079
PSA <- 0.1754
PSAspline1 <- -0.0011
PSAspline2 <- 0.003
BioGGG2 <- 1.5255
BioGGG3 <- 2.5725
BioGGG4 <- 2.7054
BioGGG5 <- 3.4228
cT2A <- 0.2895
cT2B <- 0.6206
cT2C <- 0.9285
cT3 <- 1.2689



MSKCCcohort1$MSKCCprob <- ""
MSKCCcohort1$MSKCCprob <- as.numeric(MSKCCcohort1$MSKCCprob)

for (i in 1:nrow(MSKCCcohort1)){  
  MSKCCcohort1[i, "MSKCCprob"] <- InterceptMSKCC + Age*MSKCCcohort1[i, "Age"] + PSA*MSKCCcohort1[i, "PSA"] + PSAspline1*MSKCCcohort1[i, "PSAsp1var"] + PSAspline2*MSKCCcohort1[i, "PSAsp2var"] + BioGGG2*MSKCCcohort1[i, "BioGGG2"] + BioGGG3*MSKCCcohort1[i, "BioGGG3"] + BioGGG4*MSKCCcohort1[i, "BioGGG4"] + BioGGG5*MSKCCcohort1[i, "BioGGG5"] + cT2A*MSKCCcohort1[i, "cT2a"] + cT2B*MSKCCcohort1[i, "cT2b"] + cT2C*MSKCCcohort1[i, "cT2c"] + cT3*MSKCCcohort1[i, "cT3"] 
 
}

MSKCCcohort1$MSKCCprobpred <- ""
MSKCCcohort1$MSKCCprobpred <- as.numeric(MSKCCcohort1$MSKCCprobpred)

for (i in 1:nrow(MSKCCcohort1)){
  MSKCCcohort1[i, "MSKCCprobpred"] <-  exp(MSKCCcohort1[i,"MSKCCprob"]) / (1 + exp(MSKCCcohort1[i,"MSKCCprob"])) 
}

####

```



[Briganti 2012](https://www.sciencedirect.com/science/article/pii/S0302283811012309?via%3Dihub), we used the coeficients from [Diamand et al](https://www.sciencedirect.com/science/article/abs/pii/S1078143920301526?via%3Dihub).

```{r, eval=FALSE}
Intercept = -5.3234
PSA = 0.0361
bricT2 = 0.5874
bricT3 = 1.9940
primgleason = 1.2954 
sekgleason = 0.3722
Corepos = 0.0269

briganti2012$Brigantiprob <- ""
briganti2012$Brigantiprob <- as.numeric(briganti2012$Brigantiprob)

for (i in 1:nrow(briganti2012)){  
 briganti2012[i, "Brigantiprob"] <- InterceptBriganti  + PSABriganti*briganti2012[i, "PSA"]  + bricT2*briganti2012[i, "bricT2"] + bricT3*briganti2012[i, "bricT3"] + primgleason*briganti2012[i, "primgleason"] + sekgleason*briganti2012[i, "sekgleason"] + Corepos*briganti2012[i, "PercPosCores"] 
 
}

briganti2012$Brigantiprobpred <- ""
briganti2012$Brigantiprobpred <- as.numeric(briganti2012$Brigantiprobpred)

for (i in 1:nrow(briganti2012)){
  briganti2012[i, "Brigantiprobpred"] <-  exp(briganti2012[i,"Brigantiprob"]) / (1 + exp(briganti2012[i,"Brigantiprob"])) 
}
```

Briganti 2019 ([link to reference](https://www.sciencedirect.com/science/article/abs/pii/S030228381830753X?via%3Dihub))

```{r, eval=FALSE}

Intercept = -4.5974
PSA = 0.0416
ECE = 1.2214
SVI = 1.4672
mmdiam = 0.0311
BioGGG3 = 1.2032
BioGGG4 = 1.8063
Corepos = 0.0119

briganti2019$Brigantiprob <- ""
briganti2019$Brigantiprob <- as.numeric(briganti2019$Brigantiprob)

for (i in 1:nrow(briganti2019)){  
  briganti2019[i, "Brigantiprob"] <- InterceptBriganti  + PSABriganti*briganti2019[i, "PSA"]  + ECE*briganti2019[i, "ECE"] + SVI*briganti2019[i, "SVI"] + mmdiam*briganti2019[i, "mmdiam"] + BriGG3*briganti2019[i, "BioGGG4"] + BriGG4*briganti2019[i, "BioGGG5"] + Corepos*briganti2019[i, "Corepos"] 
 
}

briganti2019$Brigantiprobpred <- ""
briganti2019$Brigantiprobpred <- as.numeric(briganti2019$Brigantiprobpred)

for (i in 1:nrow(briganti2019)){
  briganti2019[i, "Brigantiprobpred"] <-  exp(briganti2019[i,"Brigantiprob"]) / (1 + exp(briganti2019[i,"Brigantiprob"])) 
}


##############

# Recalibrated coeficients
Intercept = -4.231
PSA = 0.030 
ECE = 0.900
SVI = 1.081
mmdiam = 0.0229 
BioGGGG3 = 0.886 
BioGGG4 = 1.331 
Corepos = 0.010

# Coeficients after refiting the model
Intercept = -3.542
PSA = 0.007 
ECE = 0.927
SVI = 2.203
mmdiam = 0.017 
BioGGG3 = 0.239
BioGGG4 = 0.691 
Corepos = 0.010
```





